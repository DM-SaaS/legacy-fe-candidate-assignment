#!/bin/bash

# Web3 Message Signer & Verifier - Development Start Script
# This script starts both backend and frontend servers with dynamic port selection

echo "üöÄ Starting Web3 Message Signer & Verifier..."
echo "üìç Root directory: $(pwd)"
echo ""

# Function to find available port
find_available_port() {
    local port=$1
    while lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; do
        echo "‚ö†Ô∏è  Port $port is in use, trying $((port + 1))..."
        port=$((port + 1))
    done
    echo $port
}

# Function to kill processes on specific ports
cleanup_ports() {
    echo "üßπ Cleaning up any existing processes..."
    # Kill any existing processes on common ports
    for port in 3000 3001 3002 3003 3004 3005; do
        if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo "üî¥ Killing process on port $port"
            lsof -ti:$port | xargs kill -9 2>/dev/null || true
        fi
    done
    sleep 1
}

# Check if backend and frontend directories exist
if [ ! -d "backend" ]; then
    echo "‚ùå Backend directory not found!"
    exit 1
fi

if [ ! -d "frontend" ]; then
    echo "‚ùå Frontend directory not found!"
    exit 1
fi

# Cleanup any existing processes
cleanup_ports

# Find available ports
BACKEND_PORT=$(find_available_port 3001)
FRONTEND_PORT=$(find_available_port 3000)

echo "üîç Selected ports:"
echo "üîß Backend: $BACKEND_PORT"
echo "üåê Frontend: $FRONTEND_PORT"
echo ""

# Update frontend .env.local with backend port
if [ -f "frontend/.env.local" ]; then
    # Update existing .env.local
    sed -i.bak "s|NEXT_PUBLIC_BACKEND_URL=.*|NEXT_PUBLIC_BACKEND_URL=http://localhost:$BACKEND_PORT|g" frontend/.env.local
    rm -f frontend/.env.local.bak
    echo "‚úÖ Updated frontend/.env.local with backend URL"
else
    # Create .env.local if it doesn't exist
    echo "üìù Creating frontend/.env.local file..."
    cat > frontend/.env.local << EOF
# Auto-generated by start.sh
NEXT_PUBLIC_DYNAMIC_ENVIRONMENT_ID=your_dynamic_environment_id_here
NEXT_PUBLIC_BACKEND_URL=http://localhost:$BACKEND_PORT
EOF
    echo "‚ö†Ô∏è  Please update NEXT_PUBLIC_DYNAMIC_ENVIRONMENT_ID in frontend/.env.local"
fi

# Check if node_modules exist, if not, install dependencies
if [ ! -d "backend/node_modules" ]; then
    echo "üì¶ Installing backend dependencies..."
    cd backend && npm install && cd ..
fi

if [ ! -d "frontend/node_modules" ]; then
    echo "üì¶ Installing frontend dependencies..."
    cd frontend && npm install && cd ..
fi

# Check if backend is built
if [ ! -d "backend/dist" ]; then
    echo "üî® Building backend..."
    cd backend && npm run build && cd ..
fi

echo ""
echo "üéØ Starting services..."
echo "üîß Backend will run on: http://localhost:$BACKEND_PORT"
echo "üåê Frontend will run on: http://localhost:$FRONTEND_PORT"
echo ""
echo "Press Ctrl+C to stop both services"
echo ""

# Function to handle cleanup on exit
cleanup_on_exit() {
    echo ""
    echo "üõë Stopping services..."
    kill $(jobs -p) 2>/dev/null || true
    exit 0
}

# Set trap to cleanup on exit
trap cleanup_on_exit SIGINT SIGTERM

# Start backend in background
echo "üîß Starting backend on port $BACKEND_PORT..."
cd backend
PORT=$BACKEND_PORT npm run dev &
BACKEND_PID=$!
cd ..

# Wait a moment for backend to start
sleep 3

# Start frontend in background
echo "üåê Starting frontend on port $FRONTEND_PORT..."
cd frontend
PORT=$FRONTEND_PORT npm run dev &
FRONTEND_PID=$!
cd ..

# Wait for both processes
wait $BACKEND_PID $FRONTEND_PID